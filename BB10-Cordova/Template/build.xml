<!--
 Copyright (c) 2014 BlackBerry Limited

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="CordovaPluginBuild" default="build"  basedir=".">
	<description>
	The BB10-Cordova plugin template is a base code structure for building
	Webworks/Cordova plugins for BlackBerry 10. This Ant build will replace
	all instances of ???PROJECT_NAME???, ???PROJECT_FUNCTION???, ???PROJECT_FUNCTION_START???, ???CORDOVA_PLUGIN_ID???, ???PROJECT_NAME_LOWERCASE???, and ???PROJECT_AUTHOR??? 
	with the values entered in the setup script. This build process aims to simplify 
	the process of modifying all references to template to the actual plugin project name.
	At the end of this process you will import the contents of the build directory into
	Momentics for starting your plugin development
	
	This build only needs to be run the first time you would like to create a new
	BB10-Cordova project. 
PLEASE NOTE: Each time you run the build command the build directory will be deleted.
	</description>


	<scriptdef language="javascript" name="lower">
	    <attribute name="string" />
	    <attribute name="to" />
	    project.setProperty( attributes.get("to"), attributes.get("string").toLowerCase());
	</scriptdef>
	<scriptdef language="javascript" name="ucFirst">
	    <attribute name="string" />
	    <attribute name="to" />
	    var inputString = attributes.get("string");
	    project.setProperty(attributes.get("to"), inputString.substr(0,1).toUpperCase() + inputString.substr(1));
	</scriptdef> 
	<scriptdef language="javascript" name="lcFirst">
	    <attribute name="string" />
	    <attribute name="to" />
	    var inputString = attributes.get("string");
	    project.setProperty(attributes.get("to"), inputString.substr(0,1).toLowerCase() + inputString.substr(1));
	</scriptdef>

	<!-- set global properties for this build -->
	<property name="build" location="build" relative="true" />
	<property name="plugin" location="plugin" relative="true" />
	<property name="src" location="${plugin}/src/blackberry10/native/src" relative="true" />
	<property name="native" location="${plugin}/src/blackberry10/native" relative="true" />
	<property name="sample" location="sample" relative="true" />
	<input message="Please enter a project name in the following format e.g. HelloWorld " addproperty="projectName" />
	<input message="Please enter a cordova plugin id in the following format e.g. com.blackberry.community.helloworld " addproperty="cordovaPluginId" />
	<ucFirst string="${projectName}" to="projectFunction" />
	<lcFirst string="${projectName}" to="projectFunctionStart" />
	<lower string="${projectName}" to="projectNameLowerCase" />
	<input message="Please enter the project author name. " addproperty="projectAuthor"  />


	<target name="init" depends="clean">
	<!-- set build properties to values entered during the questionnaire -->
	
	<!-- create the build directory each time. The init depends on the target clean. -->
	 <mkdir dir="${build}"/>
	  <copy todir="${build}/${plugin}">
	  	<fileset dir="${plugin}" />
	  </copy>
	  <copy todir="${build}/${sample}">
	  	<fileset dir="${sample}" />
	  </copy>
	 
	</target>

	<target name="cleanConfirmation" depends="buildDirCheck" if="dir.exists" >
	   <input message="WARNING: The complete build directory is about to be deleted. Please backup the directory to a different location prior to proceeding.  Continue (y/n)?" addproperty="cleanConfirm" validargs="y,n" defaultvalue="n" />
	   <condition property="doClean">
	   <equals arg1="y" arg2="${cleanConfirm}" />
	   </condition>
	   <fail message="Build directory must be cleaned in order to proceed with a new build." >
	       <condition>
	       <equals arg1="n" arg2="${cleanConfirm}" />
	       </condition>
	   </fail>
	</target>	
	<target name="clean" depends="cleanConfirmation" if="doClean" >
		<delete dir="${build}"/>
	</target>

	<target name="buildDirCheck">
	<condition property="dir.exists">
	    <available file="${build}" type="dir" />
	</condition>
	</target>
	
	<target name="build" depends="init">
	<replace dir="${build}/${plugin}/" value="${projectName}Plugin">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <include name="**/*.project"/>
    <include name="**/*.cproject"/>
    <replacetoken>???PROJECT_NAME???</replacetoken>
    </replace>

	<replace dir="${build}/${plugin}/" value="${cordovaPluginId}plugin">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???CORDOVA_PLUGIN_ID???</replacetoken>
    </replace>
    <replace dir="${build}/${plugin}" value="${projectFunction}">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION???</replacetoken>
    </replace>
    <replace dir="${build}/${plugin}" value="${projectFunctionStart}">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION_START???</replacetoken>
    </replace>
    <replace dir="${build}/${plugin}" value="${projectNameLowerCase}plugin">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_NAME_LOWERCASE???</replacetoken>
    </replace>


    <replace dir="${build}/${plugin}" value="${projectAuthor}">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_AUTHOR???</replacetoken>
    </replace>

    <!-- Token replacements for the sample web project -->

	<replace dir="${build}/${sample}/" value="${cordovaPluginId}plugin">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???CORDOVA_PLUGIN_ID???</replacetoken>
    </replace>
    <replace dir="${build}/${sample}" value="${projectFunction}">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION???</replacetoken>
    </replace>
    <replace dir="${build}/${sample}" value="${projectFunctionStart}">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION_START???</replacetoken>
    </replace>
    <replace dir="${build}/${sample}" value="${projectAuthor}">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_AUTHOR???</replacetoken>
    </replace>


    <!-- Rename class files -->
    <move file="${build}/${src}/template_js.cpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_js.cpp" />
    <move file="${build}/${src}/template_js.hpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_js.hpp" />
    <move file="${build}/${src}/template_ndk.cpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_ndk.cpp" />
    <move file="${build}/${src}/template_ndk.hpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_ndk.hpp" />
	
    <!-- Delete Unwanted libary SO files. e.g. libTemplate.so -->
    <delete file="${build}/${native}/device/libTemplate.so" />
    <delete file="${build}/${native}/simulator/libTemplate.so" />
    
    <!-- Remove the config.xml in the www folder. Webworks 2.0 creates one during project creation. -->
    <delete file="${build}/${sample}/www/config.xml" />

</target>

</project>
