<project name="CordovaPluginBuild" default="build"  basedir=".">
	<description>
	The BB10-Cordova plugin template is a base code structure for building
	Webworks/Cordova plugins for BlackBerry 10. This Ant build will replace
	all instances of ???PROJECT_NAME???, ???PROJECT_FUNCTION???, and ???PROJECT_FUNCTION_START???
	with the values entered in the setup script. This build process aims to simplify 
	the process of modifying all references to template to the actual plugin project name.
	At the end of this process you will import the contents of the build directory into
	Momentics for starting your plugin development
	
	This build only needs to be run the first time you would like to create a new
	BB10-Cordova project. 
	</description>



	<!-- set global properties for this build -->
	<property name="build" location="build" relative="true" />
	<property name="plugin" location="plugin" relative="true" />
	<property name="src" location="${plugin}/src/blackberry10/native/src" relative="true" />
	<property name="native" location="${plugin}/src/blackberry10/native" relative="true" />
	<property name="sample" location="sample" relative="true" />
	<property name="projectName" value="${projectName}" />
	<property name="cordovaPluginId" value="${cordovaPluginId}" />
	<property name="projectFunction" value="${projectFunction}" />
	<property name="projectFunctionStart" value="${projectFunctionStart}" />
	<property name="projectNameLowerCase" value="${projectNameLowerCase}" />
	<property name="projectAuthor" value="${projectAuthor}" />
	

	<target name="init" depends="clean">
	<!-- set build properties to values entered during the questionnaire -->
	
	<!-- create the build directory each time. The init depends on the target clean. -->
	 <mkdir dir="${build}"/>
	  <copy todir="${build}/${plugin}">
	  	<fileset dir="${plugin}" />
	  </copy>
	  <copy todir="${build}/${sample}">
	  	<fileset dir="${sample}" />
	  </copy>
	 
	</target>
	
	<target name="clean">
	<!-- each time this is run we need to delete the contents of the build directory -->
		<delete dir="${build}"/>
	</target>
	
	<target name="build" depends="init">
	<replace dir="${build}/${plugin}/" value="${projectName}Plugin">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <include name="**/*.project"/>
    <include name="**/*.cproject"/>
    <replacetoken>???PROJECT_NAME???</replacetoken>
    </replace>

	<replace dir="${build}/${plugin}/" value="${cordovaPluginId}plugin">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???CORDOVA_PLUGIN_ID???</replacetoken>
    </replace>
    <replace dir="${build}/${plugin}" value="${projectFunction}">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION???</replacetoken>
    </replace>
    <replace dir="${build}/${plugin}" value="${projectFunctionStart}">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION_START???</replacetoken>
    </replace>
    <replace dir="${build}/${plugin}" value="${projectNameLowerCase}plugin">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_NAME_LOWERCASE???</replacetoken>
    </replace>


    <replace dir="${build}/${plugin}" value="${projectAuthor}">
    <include name="**/*.cpp"/>
    <include name="**/*.hpp"/>
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_AUTHOR???</replacetoken>
    </replace>

    <!-- Token replacements for the sample web project -->

	<replace dir="${build}/${sample}/" value="${cordovaPluginId}plugin">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???CORDOVA_PLUGIN_ID???</replacetoken>
    </replace>
    <replace dir="${build}/${sample}" value="${projectFunction}">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION???</replacetoken>
    </replace>
    <replace dir="${build}/${sample}" value="${projectFunctionStart}">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_FUNCTION_START???</replacetoken>
    </replace>
    <replace dir="${build}/${sample}" value="${projectAuthor}">
    <include name="**/*.js"/>
    <include name="**/*.xml"/>
    <replacetoken>???PROJECT_AUTHOR???</replacetoken>
    </replace>


    <!-- Rename class files -->
    <move file="${build}/${src}/template_js.cpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_js.cpp" />
    <move file="${build}/${src}/template_js.hpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_js.hpp" />
    <move file="${build}/${src}/template_ndk.cpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_ndk.cpp" />
    <move file="${build}/${src}/template_ndk.hpp" tofile="${build}/${src}/${projectNameLowerCase}plugin_ndk.hpp" />
	
    <!-- Delete Unwanted libary SO files. e.g. libTemplate.so -->
    <delete file="${build}/${native}/device/libTemplate.so" />
    <delete file="${build}/${native}/simulator/libTemplate.so" />
    
    <!-- Remove the config.xml in the www folder. Webworks 2.0 creates one during project creation. -->
    <delete file="${build}/${sample}/www/config.xml" />

</target>

</project>
